name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    name: Test Go Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      working-directory: backend
      run: go mod download
      
    - name: Run tests
      working-directory: backend
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.txt
        flags: backend
        
    - name: Run go vet
      working-directory: backend
      run: go vet ./...
      
    - name: Run go fmt check
      working-directory: backend
      run: |
        if [ -n "$(gofmt -s -l .)" ]; then
          echo "Go code is not formatted:"
          gofmt -s -d .
          exit 1
        fi

  test-frontend:
    name: Test React Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run linter
      working-directory: frontend
      run: npm run lint || true
      
    - name: Build UI
      working-directory: frontend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ui-build
        path: frontend/dist/
        retention-days: 7

  build:
    name: Build Binary
    needs: [test-backend, test-frontend]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install UI dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Build UI
      working-directory: frontend
      run: npm run build
      
    - name: Copy UI to embed location
      shell: bash
      run: |
        mkdir -p backend/pkg/ui
        cp -r frontend/dist backend/pkg/ui/uidist
        
    - name: Build Go binary (Linux/macOS)
      if: runner.os != 'Windows'
      working-directory: backend
      run: |
        go build -v -o ../bin/openid-server .
        
    - name: Build Go binary (Windows)
      if: runner.os == 'Windows'
      working-directory: backend
      run: |
        go build -v -o ../bin/openid-server.exe .
        
    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: openid-server-${{ matrix.os }}
        path: bin/
        retention-days: 7

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m --disable=typecheck
        working-directory: backend

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Run Gosec Security Scanner
      working-directory: backend
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -no-fail -fmt=json -out=results.json ./...
        
    - name: Display security scan results
      working-directory: backend
      if: always()
      run: |
        if [ -f results.json ]; then
          echo "Security scan completed. Results:"
          cat results.json | jq '.Issues[] | {Severity, RuleID, Details, File, Line}' || cat results.json
        fi
